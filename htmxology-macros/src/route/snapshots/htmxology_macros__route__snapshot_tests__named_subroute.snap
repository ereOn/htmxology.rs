---
source: htmxology-macros/src/route/mod.rs
expression: test_route_derive(input)
---
#[allow(unused)]
mod __test {
    use axum::response::IntoResponse as _;
    impl htmxology::Route for MyRoute {
        fn method(&self) -> http::Method {
            match self {
                Self::Api { route, .. } => route.method(),
            }
        }
    }
    impl std::fmt::Display for MyRoute {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                Self::Api { route } => {
                    std::fmt::Write::write_char(f, '/')?;
                    f.write_str("api")?;
                    route.fmt(f)?;
                }
            };
            Ok(())
        }
    }
    impl<S: Send + Sync> axum::extract::FromRequest<S> for MyRoute {
        type Rejection = axum::response::Response;
        async fn from_request(
            __req: axum::extract::Request,
            __state: &S,
        ) -> Result<Self, Self::Rejection> {
            use axum::extract::FromRequestParts;
            {
                static RE: std::sync::LazyLock<regex::Regex> = std::sync::LazyLock::new(||
                regex::Regex::new("^/api(?P<subroute>/.*)$").unwrap());
                if let Some(__captures) = RE.captures(&__req.uri().path()) {
                    {
                        let __new_path = __captures["subroute"].to_owned();
                        let __req = htmxology::replace_request_path(__req, __new_path);
                        let route = ApiRoute::from_request(__req, __state).await?;
                        return Ok(Self::Api { route });
                    }
                }
            }
            Err(http::StatusCode::NOT_FOUND.into_response())
        }
    }
}
