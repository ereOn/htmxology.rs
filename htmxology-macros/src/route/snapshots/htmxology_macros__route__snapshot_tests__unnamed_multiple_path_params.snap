---
source: htmxology-macros/src/route/mod.rs
expression: test_route_derive(input)
---
#[allow(unused)]
mod __test {
    use axum::response::IntoResponse as _;
    impl htmxology::Route for MyRoute {
        fn method(&self) -> http::Method {
            match self {
                Self::Post(..) => http::Method::GET,
            }
        }
    }
    impl std::fmt::Display for MyRoute {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                Self::Post(arg0, arg1) => {
                    std::fmt::Write::write_char(f, '/')?;
                    f.write_str("users")?;
                    std::fmt::Write::write_char(f, '/')?;
                    arg0.fmt(f)?;
                    std::fmt::Write::write_char(f, '/')?;
                    f.write_str("posts")?;
                    std::fmt::Write::write_char(f, '/')?;
                    arg1.fmt(f)?;
                }
            };
            Ok(())
        }
    }
    impl<S: Send + Sync> axum::extract::FromRequest<S> for MyRoute {
        type Rejection = axum::response::Response;
        async fn from_request(
            __req: axum::extract::Request,
            __state: &S,
        ) -> Result<Self, Self::Rejection> {
            use axum::extract::FromRequestParts;
            {
                static RE: std::sync::LazyLock<regex::Regex> = std::sync::LazyLock::new(||
                {
                    regex::Regex::new(
                            "^/users/(?P<user_id>[^/]+)/posts/(?P<post_id>[^/]+)$",
                        )
                        .unwrap()
                });
                if let Some(__captures) = RE.captures(&__req.uri().path()) {
                    return match __req.method() {
                        &http::Method::GET => {
                            Ok({
                                let arg0 = htmxology::decode_path_argument(
                                    stringify!(arg0),
                                    &__captures[1usize],
                                )?;
                                let arg1 = htmxology::decode_path_argument(
                                    stringify!(arg1),
                                    &__captures[2usize],
                                )?;
                                Self::Post(arg0, arg1)
                            })
                        }
                        _ => Err(http::StatusCode::METHOD_NOT_ALLOWED.into_response()),
                    };
                }
            }
            Err(http::StatusCode::NOT_FOUND.into_response())
        }
    }
}
