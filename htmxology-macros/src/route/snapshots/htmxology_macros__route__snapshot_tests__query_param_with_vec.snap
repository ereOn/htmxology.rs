---
source: htmxology-macros/src/route/mod.rs
expression: test_route_derive(input)
---
#[allow(unused)]
mod __test {
    use axum::response::IntoResponse as _;
    impl htmxology::Route for MyRoute {
        fn method(&self) -> http::Method {
            match self {
                Self::Search { .. } => http::Method::GET,
            }
        }
    }
    impl std::fmt::Display for MyRoute {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                Self::Search { tags } => {
                    std::fmt::Write::write_char(f, '/')?;
                    f.write_str("search")?;
                    let qs = &serde_html_form::to_string(&tags)
                        .map_err(|_| std::fmt::Error)?;
                    if !qs.is_empty() {
                        std::fmt::Write::write_char(f, '?')?;
                        f.write_str(&qs)?;
                    }
                }
            };
            Ok(())
        }
    }
    impl<S: Send + Sync> axum::extract::FromRequest<S> for MyRoute {
        type Rejection = axum::response::Response;
        async fn from_request(
            __req: axum::extract::Request,
            __state: &S,
        ) -> Result<Self, Self::Rejection> {
            use axum::extract::FromRequestParts;
            {
                static RE: std::sync::LazyLock<regex::Regex> = std::sync::LazyLock::new(||
                regex::Regex::new("^/search$").unwrap());
                if let Some(__captures) = RE.captures(&__req.uri().path()) {
                    return match __req.method() {
                        &http::Method::GET => {
                            Ok({
                                let (mut __parts, __body) = __req.into_parts();
                                let axum_extra::extract::Query(tags) = axum_extra::extract::Query::from_request_parts(
                                        &mut __parts,
                                        __state,
                                    )
                                    .await
                                    .map_err(|err| err.into_response())?;
                                let __req = http::Request::from_parts(__parts, __body);
                                Self::Search { tags }
                            })
                        }
                        _ => Err(http::StatusCode::METHOD_NOT_ALLOWED.into_response()),
                    };
                }
            }
            Err(http::StatusCode::NOT_FOUND.into_response())
        }
    }
}
