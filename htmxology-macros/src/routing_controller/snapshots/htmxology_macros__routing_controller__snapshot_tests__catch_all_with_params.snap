---
source: htmxology-macros/src/routing_controller/mod.rs
expression: test_routing_controller(input)
---
#[allow(unused)]
mod __test {
    impl htmxology::AsSubcontroller<'_, DynamicController, (u64,)> for AppController {
        fn as_subcontroller(&self, args: (u64,)) -> DynamicController {
            <DynamicController>::from((self, args.0))
        }
        fn convert_response(
            response: <DynamicController as htmxology::Controller>::Response,
        ) -> <Self as htmxology::Controller>::Response {
            response.into()
        }
    }
    #[derive(Debug, Clone, htmxology::Route)]
    pub enum AppRoute {
        #[catch_all]
        Dynamic {
            resource_id: u64,
            subroute: <DynamicController as htmxology::Controller>::Route,
        },
    }
    impl htmxology::Controller for AppController {
        type Route = AppRoute;
        type Args = ();
        type Response = Result<axum::response::Response, axum::response::Response>;
        async fn handle_request(
            &self,
            route: Self::Route,
            htmx: htmxology::htmx::Request,
            parts: http::request::Parts,
            server_info: &htmxology::ServerInfo,
        ) -> Self::Response {
            match route {
                Self::Route::Dynamic { resource_id, subroute } => {
                    let response = self
                        .get_subcontroller_with::<DynamicController>((resource_id,))
                        .handle_request(subroute, htmx, parts, server_info)
                        .await;
                    <Self as htmxology::AsSubcontroller<
                        '_,
                        DynamicController,
                        (u64,),
                    >>::convert_response(response)
                }
            }
        }
    }
}
