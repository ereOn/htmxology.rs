---
source: htmxology-macros/src/routing_controller/mod.rs
expression: test_routing_controller(input)
---
#[allow(unused)]
mod __test {
    impl htmxology::AsSubcontroller<'_, HomeController, ()> for AppController {
        fn as_subcontroller(&self, args: ()) -> HomeController {
            self.into()
        }
        fn convert_response(
            response: <HomeController as htmxology::Controller>::Response,
        ) -> <Self as htmxology::Controller>::Response {
            response.into()
        }
    }
    impl htmxology::AsSubcontroller<'_, AuthController, ()> for AppController {
        fn as_subcontroller(&self, args: ()) -> AuthController {
            self.into()
        }
        fn convert_response(
            response: <AuthController as htmxology::Controller>::Response,
        ) -> <Self as htmxology::Controller>::Response {
            response.into()
        }
    }
    impl htmxology::AsSubcontroller<'_, ApiController, ()> for AppController {
        fn as_subcontroller(&self, args: ()) -> ApiController {
            self.into()
        }
        fn convert_response(
            response: <ApiController as htmxology::Controller>::Response,
        ) -> <Self as htmxology::Controller>::Response {
            response.into()
        }
    }
    impl htmxology::AsSubcontroller<'_, NotFoundController, ()> for AppController {
        fn as_subcontroller(&self, args: ()) -> NotFoundController {
            self.into()
        }
        fn convert_response(
            response: <NotFoundController as htmxology::Controller>::Response,
        ) -> <Self as htmxology::Controller>::Response {
            response.into()
        }
    }
    #[derive(Debug, Clone, htmxology::Route)]
    pub enum AppRoute {
        ///Home page
        #[route("")]
        Home(#[subroute] <HomeController as htmxology::Controller>::Route),
        ///Authentication
        #[route("auth/")]
        Auth(#[subroute] <AuthController as htmxology::Controller>::Route),
        ///API endpoints
        #[route("api/")]
        Api(#[subroute] <ApiController as htmxology::Controller>::Route),
        ///404 handler
        #[catch_all]
        NotFound(<NotFoundController as htmxology::Controller>::Route),
    }
    impl htmxology::Controller for AppController {
        type Route = AppRoute;
        type Args = ();
        type Response = Result<axum::response::Response, axum::response::Response>;
        async fn handle_request(
            &self,
            route: Self::Route,
            htmx: htmxology::htmx::Request,
            parts: http::request::Parts,
            server_info: &htmxology::ServerInfo,
        ) -> Self::Response {
            match route {
                Self::Route::Home(route) => {
                    let response = htmxology::SubcontrollerExt::get_subcontroller::<
                        HomeController,
                    >(self)
                        .handle_request(route, htmx, parts, server_info)
                        .await;
                    <Self as htmxology::AsSubcontroller<
                        '_,
                        HomeController,
                        (),
                    >>::convert_response(response)
                }
                Self::Route::Auth(route) => {
                    let response = htmxology::SubcontrollerExt::get_subcontroller::<
                        AuthController,
                    >(self)
                        .handle_request(route, htmx, parts, server_info)
                        .await;
                    <Self as htmxology::AsSubcontroller<
                        '_,
                        AuthController,
                        (),
                    >>::convert_response(response)
                }
                Self::Route::Api(route) => {
                    let response = htmxology::SubcontrollerExt::get_subcontroller::<
                        ApiController,
                    >(self)
                        .handle_request(route, htmx, parts, server_info)
                        .await;
                    <Self as htmxology::AsSubcontroller<
                        '_,
                        ApiController,
                        (),
                    >>::convert_response(response)
                }
                Self::Route::NotFound(route) => {
                    let response = htmxology::SubcontrollerExt::get_subcontroller::<
                        NotFoundController,
                    >(self)
                        .handle_request(route, htmx, parts, server_info)
                        .await;
                    <Self as htmxology::AsSubcontroller<
                        '_,
                        NotFoundController,
                        (),
                    >>::convert_response(response)
                }
            }
        }
    }
}
