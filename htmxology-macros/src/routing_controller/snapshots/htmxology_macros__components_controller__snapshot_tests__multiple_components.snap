---
source: htmxology-macros/src/components_controller/mod.rs
expression: test_components_controller(input)
---
#[allow(unused)]
mod __test {
    impl htmxology::AsComponent<'_, HomeController, ()> for AppController {
        fn as_component_controller(&self, args: ()) -> HomeController {
            self.into()
        }
    }
    impl htmxology::AsComponent<'_, BlogController, ()> for AppController {
        fn as_component_controller(&self, args: ()) -> BlogController {
            self.into()
        }
    }
    impl htmxology::AsComponent<'_, ShopController, ()> for AppController {
        fn as_component_controller(&self, args: ()) -> ShopController {
            self.into()
        }
    }
    #[derive(Debug, Clone, htmxology::Route)]
    pub enum AppRoute {
        #[route("")]
        Home(#[subroute] <HomeController as htmxology::Controller>::Route),
        #[route("blog/")]
        Blog(#[subroute] <BlogController as htmxology::Controller>::Route),
        #[route("shop/")]
        Shop(#[subroute] <ShopController as htmxology::Controller>::Route),
    }
    impl htmxology::Controller for AppController {
        type Route = AppRoute;
        type Args = ();
        async fn handle_request(
            &self,
            route: Self::Route,
            htmx: htmxology::htmx::Request,
            parts: http::request::Parts,
            server_info: &htmxology::ServerInfo,
        ) -> Result<axum::response::Response, axum::response::Response> {
            match route {
                Self::Route::Home(route) => {
                    self.get_component::<HomeController>()
                        .handle_request(route, htmx, parts, server_info)
                        .await
                }
                Self::Route::Blog(route) => {
                    self.get_component::<BlogController>()
                        .handle_request(route, htmx, parts, server_info)
                        .await
                }
                Self::Route::Shop(route) => {
                    self.get_component::<ShopController>()
                        .handle_request(route, htmx, parts, server_info)
                        .await
                }
            }
        }
    }
}
