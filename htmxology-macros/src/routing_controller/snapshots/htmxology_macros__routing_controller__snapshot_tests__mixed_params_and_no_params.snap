---
source: htmxology-macros/src/routing_controller/mod.rs
expression: test_routing_controller(input)
---
#[allow(unused)]
mod __test {
    impl htmxology::AsSubcontroller<'_, HomeController, ()> for AppController {
        fn as_subcontroller(&self, args: ()) -> HomeController {
            self.into()
        }
        fn convert_response(
            htmx: &htmxology::htmx::Request,
            response: <HomeController as htmxology::Controller>::Response,
        ) -> <Self as htmxology::Controller>::Response {
            response.into()
        }
    }
    impl htmxology::AsSubcontroller<'_, BlogController, (u32,)> for AppController {
        fn as_subcontroller(&self, args: (u32,)) -> BlogController {
            <BlogController>::from((self, args.0))
        }
        fn convert_response(
            htmx: &htmxology::htmx::Request,
            response: <BlogController as htmxology::Controller>::Response,
        ) -> <Self as htmxology::Controller>::Response {
            response.into()
        }
    }
    impl htmxology::AsSubcontroller<'_, UserController, (String,)> for AppController {
        fn as_subcontroller(&self, args: (String,)) -> UserController {
            <UserController>::from((self, args.0))
        }
        fn convert_response(
            htmx: &htmxology::htmx::Request,
            response: <UserController as htmxology::Controller>::Response,
        ) -> <Self as htmxology::Controller>::Response {
            response.into()
        }
    }
    #[derive(Debug, Clone, htmxology::Route)]
    pub enum AppRoute {
        #[route("")]
        Home(#[subroute] <HomeController as htmxology::Controller>::Route),
        #[route("blog/{blog_id}/")]
        Blog {
            blog_id: u32,
            #[subroute]
            subroute: <BlogController as htmxology::Controller>::Route,
        },
        #[route("user/{user_id}/")]
        User {
            user_id: String,
            #[subroute]
            subroute: <UserController as htmxology::Controller>::Route,
        },
    }
    impl htmxology::Controller for AppController {
        type Route = AppRoute;
        type Args = ();
        type Response = Result<axum::response::Response, axum::response::Response>;
        async fn handle_request(
            &self,
            route: Self::Route,
            htmx: htmxology::htmx::Request,
            parts: http::request::Parts,
            server_info: &htmxology::ServerInfo,
        ) -> Self::Response {
            match route {
                Self::Route::Home(route) => {
                    let response = htmxology::SubcontrollerExt::get_subcontroller::<
                        HomeController,
                    >(self)
                        .handle_request(route, htmx.clone(), parts, server_info)
                        .await;
                    <Self as htmxology::AsSubcontroller<
                        '_,
                        HomeController,
                        (),
                    >>::convert_response(&htmx, response)
                }
                Self::Route::Blog { blog_id, subroute } => {
                    let response = htmxology::SubcontrollerExt::get_subcontroller_with::<
                        BlogController,
                    >(self, (blog_id,))
                        .handle_request(subroute, htmx.clone(), parts, server_info)
                        .await;
                    <Self as htmxology::AsSubcontroller<
                        '_,
                        BlogController,
                        (u32,),
                    >>::convert_response(&htmx, response)
                }
                Self::Route::User { user_id, subroute } => {
                    let response = htmxology::SubcontrollerExt::get_subcontroller_with::<
                        UserController,
                    >(self, (user_id,))
                        .handle_request(subroute, htmx.clone(), parts, server_info)
                        .await;
                    <Self as htmxology::AsSubcontroller<
                        '_,
                        UserController,
                        (String,),
                    >>::convert_response(&htmx, response)
                }
            }
        }
    }
}
